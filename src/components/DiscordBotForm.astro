---
import { Card, Aside } from "@astrojs/starlight/components";
---

<Card icon="setting" title="디스코드 알림봇 웹훅 URL 등록">
    <form id="form">
        <div class="form-group">
            <label for="webhook">웹훅 URL:</label>
            <input type="url" id="webhook" name="webhook" required>
        </div>

        <input type="checkbox" id="toggle-checkbox">
        <label for="toggle-checkbox" class="toggle-label">공지사항 필터링 조건</label>
        <div id="optionalFields" class="optional-fields">
            <div class="form-group">
                <label for="search">검색 키워드:</label>
                <input type="text" id="search" name="search">
            </div>
            <div class="form-group">
                <label for="department">공지부서:</label>
                <input type="text" id="department" name="department">
            </div>
            <div class="form-group">
                <label for="category">공지분류:</label>
                <input type="text" id="category" name="category">
            </div>
        </div>

        <button type="submit" id="register">등록</button>
        <button type="button" id="delete">삭제</button>
    </form>
    <div id="register-success">
        <Aside title="등록 성공!">웹훅 URL이 등록되었습니다</Aside>
    </div>
    <div id="register-error">
        <Aside type="danger" title="등록 실패">웹훅 URL 등록에 실패하였습니다</Aside>
    </div>
    <div id="delete-success">
        <Aside type="caution" title="삭제 성공">웹훅 URL을 성공적으로 삭제했습니다</Aside>
    </div>
    <div id="delete-error">
        <Aside type="danger" title="삭제 실패">웹훅 URL 삭제에 실패하였습니다</Aside>
    </div>
</Card>


<script>
    const $registerSuccess = document.querySelector('#register-success') as HTMLElement;
    const $registerError = document.querySelector('#register-error') as HTMLElement;
    const $deleteSuccess = document.querySelector('#delete-success') as HTMLElement;
    const $deleteError = document.querySelector('#delete-error') as HTMLElement;
    const $form = document.getElementById('form') as HTMLFormElement;

    document.getElementById('register')!.addEventListener('click', async (event) => {
        event.preventDefault();

        const formData = new FormData($form);

        const webhook = formData.get('webhook');
        const search = formData.get('search');
        const department = formData.get('department');
        const category = formData.get('category');

        if (!webhook) {
            alert('등록할 Webhook URL을 입력해주세요.');
            return;
        }

        try {
            const response = await fetch(`https://ajou-notice-discord-bot.asitis.workers.dev/api/webhook?webhook=${webhook}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({category, department, search})
            });

            if (response.ok) {
                $registerSuccess.style.display = 'block';
            } else {
                $registerError.style.display = 'block';
            }
        } catch (error) {
            $registerError.style.display = 'block';
        }
    });

    document.getElementById('delete')!.addEventListener('click', async (event) => {
        event.preventDefault();

        const webhook = (document.getElementById('webhook') as HTMLInputElement).value;

        if (!webhook) {
            alert('삭제할 Webhook URL을 입력해주세요.');
            return;
        }

        try {
            const response = await fetch(`https://ajou-notice-discord-bot.asitis.workers.dev/api/webhook?webhook=${webhook}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                $deleteSuccess.style.display = 'block';
            } else {
                $deleteError.style.display = 'block';
            }
        } catch (error) {
            $deleteError.style.display = 'block';
        }
    });
</script>

<style>
    #register-success,
    #register-error,
    #delete-success,
    #delete-error {
        display: none;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"], input[type="url"] {
        width: 100%;
        padding: 0.5rem;
    }

    #register {
        display: inline-block;
        outline: none;
        cursor: pointer;
        border-radius: 0.25rem;
        font-size: 1rem;
        padding: 0.25rem 1rem;
        height: 2.5rem;
        min-height: 2rem;
        min-width: 5rem;
        border: none;
        color: #fff;
        background-color: rgb(88, 101, 242);
        transition: background-color .17s ease,color .17s ease;
    }

    #button:hover {
        background-color: rgb(71, 82, 196);
    }

    #delete {
        display: inline-block;
        outline: none;
        cursor: pointer;
        border-radius: 0.25rem;
        font-size: 1rem;
        padding: 0.25rem 1rem;
        height: 2.5rem;
        min-height: 2rem;
        min-width: 5rem;
        border: none;
        color: #fff;
        background-color: #4f545c;
        transition: background-color .17s ease,color .17s ease;
    }

    .button-group {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .toggle-label {
        background-color: transparent;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: inline-block;
        cursor: pointer;
        user-select: none;
    }

    #toggle-checkbox {
        display: none;
    }

    .optional-fields {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease-out;
    }

    #toggle-checkbox:checked ~ .optional-fields {
        max-height: 50rem;
        transition: max-height 0.5s ease-in;
    }

    #toggle-checkbox:checked + .toggle-label::before {
        content: '▼';
        font-size: 0.75rem;
        margin-right: 0.5rem;
    }

    #toggle-checkbox:not(:checked) + .toggle-label::before {
        content: '▶';
        color: gray;
        font-size: 0.75rem;
        margin-right: 0.5rem;
    }
</style>
